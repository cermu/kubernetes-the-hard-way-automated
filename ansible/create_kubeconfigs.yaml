- hosts: local
  name: Create kubeconfigs and Data Encryption Config
  become: true
  become_user: ubuntu
  gather_facts: true

  vars:
    certs_location: "/home/ubuntu/certs/"
    configs_location: "/home/ubuntu/configs"
  
  tasks:
    - name: Setting KUBERNETES_ADDRESS as fact
      set_fact: KUBERNETES_ADDRESS="ControlNode1.kubernetes.local"

    - name: Create configs directory if it doesn't exist
      file:
        path: "{{ configs_location }}"
        state: directory
        mode: 0755
    
    - name: Create a kubelet kubeconfig for each worker node
      shell: |
        cd "{{ configs_location }}" &&
        for instance in workernode1 workernode2; do
          kubectl config set-cluster kubernetes-the-hard-way \
            --certificate-authority="{{ certs_location }}"ca.crt \
            --embed-certs=true \
            --server=https://{{ KUBERNETES_ADDRESS }}:6443 \
            --kubeconfig=${instance}.kubeconfig

          kubectl config set-credentials system:node:${instance} \
            --client-certificate="{{ certs_location }}"${instance}.crt \
            --client-key="{{ certs_location }}"${instance}.key \
            --embed-certs=true \
            --kubeconfig=${instance}.kubeconfig

          kubectl config set-context default \
            --cluster=kubernetes-the-hard-way \
            --user=system:node:${instance} \
            --kubeconfig=${instance}.kubeconfig

          kubectl config use-context default --kubeconfig=${instance}.kubeconfig
        done

    - name: Create a kube-proxy kubeconfig
      shell: |
        cd "{{ configs_location }}" &&
        {
          kubectl config set-cluster kubernetes-the-hard-way \
            --certificate-authority="{{ certs_location }}"ca.crt \
            --embed-certs=true \
            --server=https://{{ KUBERNETES_ADDRESS }}:6443 \
            --kubeconfig=kube-proxy.kubeconfig

          kubectl config set-credentials system:kube-proxy \
            --client-certificate="{{ certs_location }}"kube-proxy.crt \
            --client-key="{{ certs_location }}"kube-proxy.key \
            --embed-certs=true \
            --kubeconfig=kube-proxy.kubeconfig

          kubectl config set-context default \
            --cluster=kubernetes-the-hard-way \
            --user=system:kube-proxy \
            --kubeconfig=kube-proxy.kubeconfig

          kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
        }

    - name: Create a kube-controll-manager kubeconfig
      shell: |
        cd "{{ configs_location }}" &&
        {
          kubectl config set-cluster kubernetes-the-hard-way \
            --certificate-authority="{{ certs_location }}"ca.crt \
            --embed-certs=true \
            --server=https://{{ KUBERNETES_ADDRESS }}:6443 \
            --kubeconfig=kube-controller-manager.kubeconfig

          kubectl config set-credentials system:kube-controller-manager \
            --client-certificate="{{ certs_location }}"kube-controller-manager.crt \
            --client-key="{{ certs_location }}"kube-controller-manager.key \
            --embed-certs=true \
            --kubeconfig=kube-controller-manager.kubeconfig

          kubectl config set-context default \
            --cluster=kubernetes-the-hard-way \
            --user=system:kube-controller-manager \
            --kubeconfig=kube-controller-manager.kubeconfig

          kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig
        }

    - name: Create a kube-scheduler kubeconfig
      shell: |
        cd "{{ configs_location }}" &&
        {
          kubectl config set-cluster kubernetes-the-hard-way \
            --certificate-authority="{{ certs_location }}"ca.crt \
            --embed-certs=true \
            --server=https://{{ KUBERNETES_ADDRESS }}:6443 \
            --kubeconfig=kube-scheduler.kubeconfig

          kubectl config set-credentials system:kube-scheduler \
            --client-certificate="{{ certs_location }}"kube-scheduler.crt \
            --client-key="{{ certs_location }}"kube-scheduler.key \
            --embed-certs=true \
            --kubeconfig=kube-scheduler.kubeconfig

          kubectl config set-context default \
            --cluster=kubernetes-the-hard-way \
            --user=system:kube-scheduler \
            --kubeconfig=kube-scheduler.kubeconfig

          kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig
        }

    - name: Create an admin kubeconfig
      shell: |
        cd "{{ configs_location }}" &&
        {
          kubectl config set-cluster kubernetes-the-hard-way \
            --certificate-authority="{{ certs_location }}"ca.crt \
            --embed-certs=true \
            --server=https://127.0.0.1:6443 \
            --kubeconfig=admin.kubeconfig

          kubectl config set-credentials admin \
            --client-certificate="{{ certs_location }}"admin.crt \
            --client-key="{{ certs_location }}"admin.key \
            --embed-certs=true \
            --kubeconfig=admin.kubeconfig

          kubectl config set-context default \
            --cluster=kubernetes-the-hard-way \
            --user=admin \
            --kubeconfig=admin.kubeconfig

          kubectl config use-context default --kubeconfig=admin.kubeconfig
        }

    - name: Create the Data Encryption Config and key
      shell: |
        cd "{{ configs_location }}" &&
        ENCRYPTION_KEY=$(head -c 32 /dev/urandom | base64)

        cat > encryption-config.yaml <<EOF
        kind: EncryptionConfig
        apiVersion: v1
        resources:
          - resources:
              - secrets
            providers:
              - aescbc:
                  keys:
                    - name: key1
                      secret: ${ENCRYPTION_KEY}
              - identity: {}
        EOF
